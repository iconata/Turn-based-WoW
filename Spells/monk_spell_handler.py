import math

from Heroes.hero_base_stats import IBaseHero


# ---------------------------------------------------------------------------- #
#                                    Classes                                   #
# ---------------------------------------------------------------------------- #
class MonkCommonSpells(IBaseHero):
    """
    Common Spells Mixin
    This class contains the common spells and abilities of the Monk.
    """

    # ------------------------------------------------------------------------ #
    def __init__(self) -> None:
        super().__init__()
        self._curr_chi = 0
        self._max_chi = 5
        self._curr_health = self.max_health
        self._curr_energy = self.max_secondary_pool

    # ------------------------------------------------------------------------ #
    def is_specific_stat_spent(self, stat_value: int) -> bool:
        """
        Check if the player has enough chi to cast a spell.

        Args:
            chi_cost (int): The cost of the spell.

        Returns:
            bool: True if chi cost is spent, False otherwise.
        """
        if self._curr_chi >= stat_value:
            self._curr_chi -= stat_value
            return True

        return False

    # ------------------------------------------------------------------------ #
    def add_specific_stat(self, stat_value: int) -> None:
        """
        Adds the generated amount of chi to the currenlty available to the player. If the amount exceeds the maximum,
        the current chi is set to the maximum.

        Args:
            chi_generated (int): The amount of chi generated by the spell.
        """
        self._curr_chi += stat_value

        self._curr_chi = min(self._curr_chi, self._max_chi)

    # ------------------------------------------------------------------------ #
    def heal_up(self, heal_ammount: int) -> None:
        """
        Heal the target for a certain amount of health.

        Args:
            heal_ammount (int): The amount of health to heal.
        """
        self._health += heal_ammount

        self._health = min(self._health, self._max_health)

    # ------------------------------------------------------------------------ #
    def cast_spinning_crane_kick(self) -> tuple:
        """
        Spin while kicking in the air, dealing damage to all enemies in the area.

        Returns:
            _type_: _description_
        """
        self.spell_attributes["cooldown"] = 2
        self.spell_attributes["spell_cost"] = 40
        self.spell_attributes["spell_damage"] = math.ceil(self._attack_power * 40 / 100)
        self._curr_energy -= self.spell_attributes["spell_cost"]

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_vivify(self) -> None:
        """
        Causes a surge of invigorating mists, healing the target for a certain amount of health.
        The amount of health healed is based on the spell power of the player.
        The spell costs 30 energy and heals for 258% of the spell power.
        The spell can only be cast if the player has enough energy to cast it.
        """

        energy_cost = 30
        amount_to_heal = math.ceil(self._spell_power * 258 / 100)
        if energy_cost >= self._curr_energy:
            self._curr_energy -= energy_cost
            self.heal_up(amount_to_heal)


# ---------------------------------------------------------------------------- #
class WindwalkerMonkSpells(MonkCommonSpells):
    # ------------------------------------------------------------------------ #
    """
    Windwalker Monk Spells
    This class contains the spells and abilities of the Windwalker Monk.
    The Windwalker Monk is a melee DPS spec that uses chi to cast spells and abilities.

    Args:
        IBaseHero (cls): _base class for all hero stats
        CommonSpellsMixin (cls): _mixin class for common spells
    """

    def __init__(self):
        super().__init__()

    # ------------------------------------------------------------------------ #
    def cast_tiger_palm(self):
        """
        Strike with the palm of you hand, dealing physical damage to the target. Generates 2 chi.

        Returns:
            tuple: spell damage, cooldown
        """
        generated_chi = 2
        self.spell_attributes["cooldown"] = 1
        self.spell_attributes["spell_cost"] = math.ceil(
            self.max_secondary_pool * 12 / 100
        )
        self.spell_attributes["spell_damage"] = math.ceil(self.attack_power * 28 / 100)
        self._curr_energy -= self.spell_attributes["spell_cost"]
        self.add_specific_stat(generated_chi)

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_rising_sun_kick(self) -> tuple:
        """
        Kick upwards, dealing damage to the target, dealing physical damage

        Returns:
            tuple: spell damage, cooldown
        """
        self.spell_attributes["cooldown"] = 1
        chi_cost = 2
        if self.is_specific_stat_spent(chi_cost):
            self.spell_attributes["spell_damage"] = math.ceil(
                self.attack_power * 28 / 100
            )

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_fists_of_fury(self) -> tuple:
        """
        Pummel all targets in front of you, dealing physical damage.

        Returns:
            tuple: spell damage, cooldown
        """
        chi_cost = 3
        self.spell_attributes["cooldown"] = 2
        if self.is_specific_stat_spent(chi_cost):
            self.spell_attributes["spell_damage"] = math.ceil(
                self.attack_power * 138 / 100
            )

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_whirling_dragon_punch(self) -> tuple:
        """
        Perform a devastationg whirling upward stike, dealing damage to all targets in front of you.

        Returns:
            tuple: spell damage, cooldown
        """
        self.spell_attributes["cooldown"] = 5
        self.spell_attributes["spell_damage"] = math.ceil(self.attack_power * 230 / 100)

        return self.spell_attributes


# ---------------------------------------------------------------------------- #
class BrewmasterMonkSpells(MonkCommonSpells):
    # ------------------------------------------------------------------------ #
    """
    Brewmaster Monk Spells
    This class contains the spells and abilities of the Brewmaster Monk.
    The Brewmaster Monk is a tank spec that uses chi to cast spells and abilities.

    Args:
        IBaseHero (cls): _base class for all hero stats
        CommonSpellsMixin (cls): _mixin class for common spells
    """

    def __init__(self):
        super().__init__()

    # ------------------------------------------------------------------------ #
    def cast_rushing_jade_wind(self) -> tuple:
        """
        Summon a swirling wind around you, dealing damage to all enemies in the area.

        Returns:
            tuple: spell damage, cooldown
        """
        chi_cost = 1
        self.spell_attributes["cooldown"] = 1
        if self.is_specific_stat_spent(chi_cost):
            self.spell_attributes["spell_damage"] = math.ceil(
                self.attack_power * 14 / 100
            )

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_chi_burst(self) -> tuple:
        """
        Launch a burst of chi energy, dealing damage to all enemies in the area.

        Returns:
            tuple: spell damage, cooldown
        """
        self.spell_attributes["cooldown"] = 7
        self.spell_attributes["spell_damage"] = math.ceil(self.attack_power * 280 / 100)

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_keg_smash(self) -> tuple:
        """
        Smash the target with your keg, dealing damage to the target and reducing the damage taken by 30% for 1 turn.

        Returns:
            tuple: spell damage, cooldown
        """
        # TODO: reset the damage reduction after 1 turn

        spell_cost = 40
        self.spell_attributes["spell_cost"] = spell_cost
        self.spell_attributes["cooldown"] = 3
        self.spell_attributes["spell_damage"] = math.ceil(self.attack_power * 100 / 100)
        self._curr_energy -= spell_cost
        self.spell_attributes["damage_reduction"] = 30

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_blackout_kick(self) -> tuple:
        """
        Kick the target with a blast of chi, dealing damage to the target.

        Returns:
            tuple: spell damage, cooldown
        """
        chi_cost = 3
        self.spell_attributes["cooldown"] = 1
        if self.is_specific_stat_spent(chi_cost):
            self.spell_attributes["spell_damage"] = math.ceil(
                self.attack_power * 85 / 100
            )

        return self.spell_attributes

    # ------------------------------------------------------------------------ #
    def cast_breath_of_fire(self) -> tuple:
        """
        Breath fire on the target, dealing fire damage infront of the hero.

        Returns:
            tuple: spell damage, cooldown
        """
        self.spell_attributes["cooldown"] = 5
        self.spell_attributes["spell_damage"] = math.ceil(self.attack_power * 54 / 100)

        return self.spell_attributes
